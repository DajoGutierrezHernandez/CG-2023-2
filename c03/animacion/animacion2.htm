<!DOCTYPE html>
<html>

<head>
    <title>Primera Escena con Three.js</title>
    <!-- <script type="text/javascript" src="three.js"></script>. ERROR numero 1, se llama a un archivo que no existe, para solucionarlo se llama a un archivo en la nuve --> 
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <!-- <script type="text/javascript" src="jquery-1.9.0.js"></script>. ERROR numero 2, se llama a un archivo que no existe, para solucionarlo se llama a un archivo en la nuve -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
    <style>
        body{
            /* configurar margin a 0 y overflow a hidden, para ocupar pantalla completa */
            margin: 0;
            overfLow: hidden;
        }
    </style>
</head>
<body> 

<!-- Div que contendre la salida -->
<div id="WebGL-salida">
</div> 

<!-- Codigo Javascript que ejecuta nuestros ejemplos Three.js -->
<script type="text/javascript"> 

    // una vez que todo ha sido cargado, ejecutamos nuestro contenido Three.js.
    $(function () {

        // creamos una scene, que contendrá todos nuestros elementos, como objetos, cámaras y luces
        var scene= new THREE.Scene();

        // creamos una camera, que define desde donde vamos a mirar.
        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000); 

        // creamos un render y configuramos el tamaño
        var renderer = new THREE.WebGLRenderer();

        // renderer.setClearColorHex(OxEEEEEE); ERROR 3, se inicia el color utilizando O. A demás Set ClearColor no es una función. Se cambia la función por setClearColor y la O por 0
        renderer.setClearColor(new THREE.Color(0xEEEEEE));
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMapEnabled=true;

        var axes = new THREE.AxisHelper( 20 );
        scene.add(axes);

        // creamos el plano del suelo
        var planeGeometry = new THREE.PlaneGeometry(60,20);
        // var planeMaterial = new THREE.MeshBasicMaterial({color: excccccc}); ERROR 4, el color inicia con e. Se cambia la e por un 0
        var planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});
        var plane = new THREE.Mesh(planeGeometry,planeMaterial);
        plane.receiveShadow=true;


        // rotamos y posicionamos el plano
        //plane.rotation.x=-0.5*Moth.PI; ERROR 5 está mal escrita por el Moth. Se cambia a Math.
        plane.rotation.x=-0.5*Math.PI;
        plane.position.x=15
        plane.position.y=0
        plane.position.z=0

        // añadimos el plano a la escena
        scene.add(plane);

        // creamos un cubo
        //var cubeGeometry = new THREE.CubeGeometry(4,4,4); ERROR 6, CubeGeometry no existe, se cambia a BoxGeometry
        var cubeGeometry = new THREE.BoxGeometry(4,4,4);
        // var cubeMaterial = new THREE.MesheasicMaterial((color: 0xff0000, wireframe: true)); ERROR 7 al escribir entre parentesis el color y el wireframe. 
        // A demás de no existir un MeshasicMaterial. Se reemplaza por {} y MeshBasicMaterial
        var cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});
        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
        cube.castShadow=true;

        // posicionamos el cubo
        cube.position.x=-4;
        cube.position.y=3;
        cube.position.z=0; 

        // añadimos el cubo a la escena
        scene.add(cube);

        // creamos una esfera
        var sphereGeometry = new THREE.SphereGeometry(4,20,20);
        var sphereMaterial = new THREE.MeshLambertMaterial({color: 0x7777ff});
        // var sphere = THREE.Mesh(sphereGeometry,sphereMaterial); ERROR 8, no se inicializa el constructor. Se agrega el new
        var sphere = new THREE.Mesh(sphereGeometry,sphereMaterial);

        // posicionamos la esfera
        sphere.position.x=20;
        sphere.position.y=4;
        sphere.position.z=2;
        sphere.castShadow=true;

        // añadimos la esfera a la escena
        scene.add(sphere); 

        // posiciona y apunta la camara al centro de la escena
        camera.position.x = -30;
        camera.position.y = 40;
        camera.position.z = 30;
        camera.lookAt(scene.position);

        var spotLight=new THREE.SpotLight(0xffffff);
        spotLight.position.set(-40,60,-10);
        spotLight.castShadow=true;
        scene.add(spotLight);

        // añadir la salida de la renderizacion al elemento html
        $("#WebGL-salida").append(renderer.domElement); 

        // renderizar la escena
        renderer.render(scene, camera); 
    });


    </script>
    </body>
    </html>